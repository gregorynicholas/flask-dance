{"name":"flask-dance","tagline":"doing the oauth dance with style.  flask, requests, oauthlib","body":"flask-dance\r\n===========\r\n\r\ndoing the oauth dance with style.  flask, requests, oauthlib\r\n\r\n\r\n### installation\r\n\r\nthe basics:\r\n\r\n    $ pip install flask-dance\r\n\r\n\r\nor if you're planning on using the built-in [sql-alchemy][sqla] support:\r\n\r\n    $ pip install flask-dance[models]\r\n\r\n\r\n### quickstart\r\n\r\nfor [a few popular OAuth providers][1], Flask-Dance provides pre-set configurations. For\r\nexample, to authenticate with Github, just do the following:\r\n\r\n```\r\npython\r\nfrom flask import Flask, redirect, url_for\r\nfrom flask_dance.contrib.github import make_github_blueprint, github\r\n\r\napp = Flask(__name__)\r\napp.secret_key = \"supersekrit\"\r\nblueprint = make_github_blueprint(\r\n    client_id=\"my-key-here\",\r\n    client_secret=\"my-secret-here\",\r\n    redirect_to=\"index\",\r\n)\r\napp.register_blueprint(blueprint, url_prefix=\"/login\")\r\n\r\n@app.route(\"/\")\r\ndef index():\r\n    if not github.authorized:\r\n        return redirect(url_for(\"github.login\"))\r\n    resp = github.get(\"/user\")\r\n    assert resp.ok\r\n    return \"You are @{login} on Github\".format(login=resp.json()[\"login\"])\r\n\r\nif __name__ == \"__main__\":\r\n    app.run()\r\n```\r\n\r\n**NOTE**: For this example to work, you must first [register an application on Github][ghapp]\r\nto get a `client_id` and `client_secret`. The application's authorization callback URL must be\r\n`http://localhost:5000/login/github/authorized`. You'll also need to set the\r\n[`OAUTHLIB_INSECURE_TRANSPORT`][oauthlib_insecure] environment variable, so that oauthlib\r\nallows you to use HTTP rather than HTTPS.\r\n\r\nThe `github` object is a [context local][2], just like `flask.request`. That means\r\nthat you can import it in any Python file you want, and use it in the context\r\nof an incoming HTTP request. If you've split your Flask app up into multiple\r\ndifferent files, feel free to import this object in any of your files, and use\r\nit just like you would use the [`requests`][req] module.\r\n\r\nYou can also use Flask-Dance with any OAuth provider you'd like, not just the\r\npre-set configurations. [See the documentation for how to use other OAuth\r\nproviders.](http://flask-dance.readthedocs.org/en/latest/consumers.html)\r\n\r\n[1]: http://flask-dance.readthedocs.org/en/latest/contrib.html\r\n[2]: http://flask.pocoo.org/docs/latest/quickstart/#context-locals\r\n\r\nToken Storage\r\n=============\r\nBy default, OAuth access tokens are stored in Flask's session object. This means\r\nthat if the user ever clears their browser cookies, they will have to go through\r\nthe OAuth flow again, which is not good. You're better off storing access tokens\r\nin a database or some other persistent store. If you're using [SQLAlchemy][sqla],\r\nit's easy: just pass your database model and session to the blueprint.\r\nFlask-Dance even comes with a mixin to help you define your database model,\r\nand it works with User models, too!\r\n\r\n```python\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_dance.models import OAuthConsumerMixin\r\n\r\ndb = SQLAlchemy()\r\n\r\nclass User(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    # ... other columns as needed\r\n\r\nclass OAuth(db.Model, OAuthConsumerMixin):\r\n    user_id = db.Column(db.Integer, db.ForeignKey(User.id))\r\n    user = db.relationship(User)\r\n\r\n# get_current_user() is a function that returns the current logged in user\r\nblueprint.set_token_storage_sqlalchemy(OAuth, db.session, user=get_current_user)\r\n```\r\n\r\nFlask-Dance can seamlessly integrate with [Flask-SQLAlchemy][fs] for database\r\nintegration, [Flask-Login][fl] for user management, and [Flask-Cache][fc] for caching.\r\nHowever, none of these other extensions are required. You don't even have to\r\nuse [SQLAlchemy][sqla] at all; if you'd prefer to use a different storage system,\r\nwriting a custom integration is easy. [See the documentation for how to\r\nuse other token storage systems.](http://flask-dance.readthedocs.org/en/latest/token-storage.html#custom-storage)\r\n\r\n[ghapp]: https://github.com/settings/applications/new\r\n[oauthlib_insecure]: http://oauthlib.readthedocs.org/en/latest/oauth2/security.html#envvar-OAUTHLIB_INSECURE_TRANSPORT\r\n[req]: http://python-requests.org/\r\n[sqla]: http://www.sqlalchemy.org/\r\n[fs]: http://pythonhosted.org/Flask-SQLAlchemy/\r\n[fl]: https://flask-login.readthedocs.org/\r\n[fc]: http://pythonhosted.org/Flask-Cache/","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}